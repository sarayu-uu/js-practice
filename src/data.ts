
export interface CodeExample {
    category: string;
    concept: string;
    code: string;
    output: string;
}

export const codeExamples: CodeExample[] = [
  {
    "category": "1.loops",
    "concept": "1.loopsintro",
    "code": "// loops introduction\r\n\r\n/*What is a Loop?\r\nA loop is a programming structure that repeats a block of code multiple times until a certain condition is met.\r\nIt helps avoid writing the same code over and over again.\r\n\r\nWhy use Loops?\r\nSaves time – less repetitive typing.\r\n\r\nReduces errors – one change updates all iterations.\r\n\r\nMakes code shorter & cleaner.\r\n\r\nBasic Idea\r\nEvery loop generally has:\r\n\r\nInitialization – set a starting point.\r\n\r\nCondition – decide when the loop should stop.\r\n\r\nUpdate – move to the next step (increment/decrement).\r\n\r\nTypes of Loops in JavaScript\r\nFor loop – runs for a specific number of times.\r\n\r\nWhile loop – runs while a condition is true.\r\n\r\nDo-while loop – runs at least once before checking condition.\r\n\r\nFor...of – loops over iterable objects like arrays.\r\n\r\nFor...in – loops over object properties.\r\n\r\n\r\nReal-Life Example\r\nChecking attendance for each student in a list.\r\nSending the same email to multiple people.\r\nPrinting all numbers from 1 to 100.\r\n*/\r\n\r\n// Without loop\r\nconsole.log(\"Hello\");\r\nconsole.log(\"Hello\");\r\nconsole.log(\"Hello\");\r\n\r\n\r\nconsole.log(\"---------\");\r\n// With loop\r\nfor (let i = 0; i < 3; i++) {\r\n    console.log(\"Hello\");\r\n}\r\nconsole.log(\"---------\");\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n    console.log(\"sarayu the great\");\r\n}\r\n\r\nconsole.log(\"---------\");\r\n// loops;-;\r\nlet messages = [\r\n    \"Test 1: She walked in like a boss.\",\r\n    \"Test 2: The interviewer is already impressed.\",\r\n    \"Test 3: Wait... why is she talking about coffee?\",\r\n    \"Test 4: Oh no, she just said 'bruh' to the HR.\",\r\n    \"Test 5: She's smiling... or maybe crying?\"\r\n];\r\n\r\nfor (let i = 0; i < messages.length; i++) {\r\n    console.log(messages[i]);\r\n}\r\n\r\nconsole.log(\"Verdict: Ah shit, she didn't.\");\r\n\r\n\r\n\r\n\r\n",
    "output": "Hello\nHello\nHello\n---------\nHello\nHello\nHello\n---------\nsarayu the great\nsarayu the great\nsarayu the great\nsarayu the great\nsarayu the great\n---------\nTest 1: She walked in like a boss.\nTest 2: The interviewer is already impressed.\nTest 3: Wait... why is she talking about coffee?\nTest 4: Oh no, she just said 'bruh' to the HR.\nTest 5: She's smiling... or maybe crying?\nVerdict: Ah shit, she didn't."
  },
  {
    "category": "1.loops",
    "concept": "2.for-loop",
    "code": "// for loop\r\n\r\n//examples\r\n\r\n// Count from 1 to 5\r\nfor (let i = 1; i <= 5; i++) {\r\n    console.log(i);\r\n}\r\nconsole.log(\"---------\");\r\n\r\nfor (let i = 5; i >= 1; i--) {\r\n    console.log(i);\r\n\r\n}\r\n\r\nconsole.log(\"---------\");\r\n\r\n// Print the multiplication table of 3\r\nfor (let i = 1; i <= 10; i++) {\r\n    console.log(`3 x ${i} = ${3 * i}`);\r\n}\r\n\r\nconsole.log(\"---------\");\r\n\r\n\r\nlet fruits = [\"Apple\", \"Banana\", \"Grapes\", \"Pineapple\"];\r\n\r\nfor (let i = fruits.length - 1; i >= 0; i--) {\r\n    console.log(fruits[i]);\r\n}\r\nconsole.log(\"---------\");\r\n\r\n\r\nlet fruitss = [\"ugh\", \"ughhgh\", \"rhbdsjr\" , \"yurdr\"];\r\nfor (let i =0; i<fruitss.length; i++){\r\n    console.log(fruitss[i]);\r\n}\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet messages = [\r\n    \"1. why\",\r\n    \"2. ofc yeah\",\r\n    \"3. idk\",\r\n    \"4. eh\",\r\n    \"5. nvm\"\r\n];\r\nfor (let i=0; i<messages.length; i++){\r\n    console.log(messages[i]);\r\n}",
    "output": "1\n2\n3\n4\n5\n---------\n5\n4\n3\n2\n1\n---------\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n---------\nPineapple\nGrapes\nBanana\nApple\n---------\nugh\nughhgh\nrhbdsjr\nyurdr\n---------\n1. why\n2. ofc yeah\n3. idk\n4. eh\n5. nvm"
  },
  {
    "category": "1.loops",
    "concept": "3.while-loop",
    "code": "// while loop\r\n\r\nlet i = 1;\r\nwhile (i <= 5) {\r\n    console.log(i);\r\n    i++;\r\n}\r\nconsole.log(\"---------\");\r\n\r\nlet u = 5;\r\nwhile (u >= 0) {\r\n    console.log(u);\r\n    u--;\r\n}\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet num = 9;\r\nlet j = 1;\r\nwhile (j<=10) {\r\nconsole.log(`${num} x ${j} = ${num*j}`);\r\nj++;\r\n}\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet snacks = [\"Chocolate\", \"Cookie\", \"Popcorn\"];\r\nlet index = 0;\r\n\r\nwhile (index < snacks.length) {\r\n    console.log(snacks[index]);\r\n    index++;\r\n}\r\n\r\nlet messages = [\r\n    \"1. why\",\r\n    \"2. ofc yeah\",\r\n    \"3. idk\",\r\n    \"4. eh\",\r\n    \"5. oh... wait... nope. she's gone.\"\r\n];\r\n\r\nfor (let i = 0; i < messages.length; i++) {\r\n    console.log(messages[i]);\r\n}\r\n\r\n",
    "output": "1\n2\n3\n4\n5\n---------\n5\n4\n3\n2\n1\n0\n---------\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n---------\nChocolate\nCookie\nPopcorn\n1. why\n2. ofc yeah\n3. idk\n4. eh\n5. oh... wait... nope. she's gone."
  },
  {
    "category": "1.loops",
    "concept": "4.do-while-loop",
    "code": "// do while loop\r\n\r\nlet i = 1;\r\ndo {\r\n    console.log(i);\r\n    i++;\r\n} while (i <= 5);\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet count = 5;\r\ndo {\r\n    console.log(count);\r\n    count--;\r\n} while (count > 0);\r\n\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet num = 4;\r\nlet j = 1;\r\ndo {\r\n    console.log(`${num} x ${j} = ${num * j}`);\r\n    j++;\r\n} while (j <= 10);\r\n\r\nconsole.log(\"---------\");\r\n\r\nlet snacks = [\"Chocolate\", \"Cookie\", \"popcorn\"];\r\nlet index = 0;\r\ndo {\r\n    console.log(snacks[index]);\r\n    index++;\r\n} while (index < snacks.length);\r\n\r\n\r\nconsole.log(\"---------\");  \r\n\r\nlet sarayuspatience = 1;\r\ndo { \r\n    console.log(`limit ${sarayuspatience}:` + [\r\n        \"shes trying\",\r\n        \"slowly chipping off\",\r\n        \"at her breaking point\",\r\n        \"ok shes done\"\r\n    ][sarayuspatience-1]);\r\n    sarayuspatience++;\r\n} while (sarayuspatience <= 4);\r\n\r\nconsole.log(\"dont test her\");",
    "output": "1\n2\n3\n4\n5\n---------\n5\n4\n3\n2\n1\n---------\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n---------\nChocolate\nCookie\npopcorn\n---------\nlimit 1:shes trying\nlimit 2:slowly chipping off\nlimit 3:at her breaking point\nlimit 4:ok shes done\ndont test her"
  },
  {
    "category": "2.template_literals",
    "concept": "expression_interpolation",
    "code": "\r\n\r\nlet a = 10, b = 20;\r\nconsole.log(`The sum is ${a + b}`);\r\n\r\nconsole.log(\"--------\")\r\n\r\nconsole.log(`Uppercase: ${\"hello\".toUpperCase()}`);\r\n\r\n\r\nconsole.log(\"--------\")\r\n\r\nlet questions = 5;\r\nlet correctAnswers = 2;\r\nconsole.log(`She answered ${correctAnswers} out of ${questions} questions correctly.\r\nThat’s a success rate of ${(correctAnswers / questions * 100).toFixed(1)}%.`);\r\n\r\n\r\nconsole.log(\"--------\")\r\n\r\nlet naps = 3;\r\nlet tvEpisodes = 4;\r\nlet lazinessScore = naps * tvEpisodes;\r\nconsole.log(`Today's activities:\r\n- Naps taken: ${naps}\r\n- TV episodes watched: ${tvEpisodes}\r\n- Laziness score: ${lazinessScore} (new record)`);\r\n",
    "output": "The sum is 30\n--------\nUppercase: HELLO\n--------\nShe answered 2 out of 5 questions correctly.\nThat’s a success rate of 40.0%.\n--------\nToday's activities:\n- Naps taken: 3\n- TV episodes watched: 4\n- Laziness score: 12 (new record)"
  },
  {
    "category": "2.template_literals",
    "concept": "multilinestring",
    "code": "\r\n//Template literals in JavaScript are a special way to create strings that are more flexible and readable than regular strings.\r\n\r\n//They use backticks ( ` ) instead of single (') or double (\") quotes.\r\n\r\nlet poem = `Roses are red,\r\nViolets are blue,\r\nI can write strings\r\nOn multiple lines too!`;\r\nconsole.log(poem);\r\n\r\n\r\nlet poop = `poop poop poop poop\r\npoop poop poop \r\npoop poop \r\npoop `\r\nconsole.log(poop);\r\n\r\n//single line emo ila rayali\r\n\r\nlet name = \"Sarayu\";\r\n\r\nconsole.log(`Hello, ${name}!`);\r\n\r\n\r\n\r\nconsole.log(\"--------\");\r\n\r\nlet workDay = `Step 1: Wake up late\r\nStep 2: Pretend to be productive\r\nStep 3: Stare at the screen until lunch\r\nStep 4: Question career choices\r\nStep 5: Repeat tomorrow`;\r\nconsole.log(workDay);\r\n\r\n\r\nconsole.log(\"--------\");\r\n\r\n\r\nlet character = \"Alex\";\r\nlet script = `${character}: I can do this.\r\nBoss: Are you sure?\r\n${character}: No, but I’ll pretend.`;\r\nconsole.log(script);\r\n\r\n\r\nconsole.log(\"--------\");\r\n",
    "output": "Roses are red,\nViolets are blue,\nI can write strings\nOn multiple lines too!\npoop poop poop poop\npoop poop poop \npoop poop \npoop \nHello, Sarayu!\n--------\nStep 1: Wake up late\nStep 2: Pretend to be productive\nStep 3: Stare at the screen until lunch\nStep 4: Question career choices\nStep 5: Repeat tomorrow\n--------\nAlex: I can do this.\nBoss: Are you sure?\nAlex: No, but I’ll pretend.\n--------"
  },
  {
    "category": "2.template_literals",
    "concept": "Nested_Template_Literals",
    "code": "let greet = name => `Hello, ${name}!`;\r\nconsole.log(`Saying hi: ${greet(\"Sarayu\")}`);\r\n\r\n\r\n\r\n\r\nconsole.log(\"--------\");\r\n\r\nlet interviewRound = round => `Round ${round}: ${\r\n    round === 1 ? \"She walked in confidently.\"\r\n    : round === 2 ? \"Answered like a pro.\"\r\n    : round === 3 ? \"Accidentally mentioned her Netflix watchlist.\"\r\n    : round === 4 ? \"Asked HR if snacks were free.\"\r\n    : \"Left the room like it was all part of the plan.\"\r\n}`;\r\n\r\nlet story = `Interview Progress:\r\n${interviewRound(1)}\r\n${interviewRound(2)}\r\n${interviewRound(3)}\r\n${interviewRound(4)}\r\n${interviewRound(5)}\r\n\r\nVerdict: Let's just say... there's always next time.`;\r\n\r\nconsole.log(story);\r\n",
    "output": "Saying hi: Hello, Sarayu!\n--------\nInterview Progress:\nRound 1: She walked in confidently.\nRound 2: Answered like a pro.\nRound 3: Accidentally mentioned her Netflix watchlist.\nRound 4: Asked HR if snacks were free.\nRound 5: Left the room like it was all part of the plan.\n\nVerdict: Let's just say... there's always next time."
  },
  {
    "category": "3. ternary_operators",
    "concept": "ternary_operators",
    "code": "/*A ternary operator in JavaScript is basically a short,\r\n compact way of writing an if...else statement.\r\n\r\nThe syntax looks like this:\r\n\r\ncondition ? valueIfTrue : valueIfFalse\r\n\r\n*/\r\n\r\nlet age = 26;\r\nlet canDrink = age >= 21 ? \"Yes, you can drink.\" : \"No, you can't drink.\";\r\nconsole.log(canDrink);\r\n\r\n\r\nconsole.log(\"--------\");\r\n\r\n\r\nlet score = 75;\r\nconsole.log(score >= 50 ? \"You passed!\" : \"You failed!\");\r\n\r\nconsole.log(\"--------\");\r\n\r\nlet temp = 30;\r\nlet weather = temp > 35 ? \"Too hot\"\r\n    : temp < 15 ? \"Too cold\"\r\n    : \"Just right\";\r\nconsole.log(weather);\r\n\r\nconsole.log(\"--------\");\r\n\r\n\r\nlet gotJob = true;\r\nconsole.log(gotJob ? \"Celebration time!\" : \"Back to job hunting...\");\r\n\r\nconsole.log(\"--------\");\r\n\r\nlet interviewRound = 3;\r\nconsole.log(`Round ${interviewRound}: ${\r\n    interviewRound === 4 ? \"Asked about free snacks.\" : \"Answered seriously.\"\r\n}`);\r\n",
    "output": "Yes, you can drink.\n--------\nYou passed!\n--------\nJust right\n--------\nCelebration time!\n--------\nRound 3: Answered seriously."
  },
  {
    "category": "arrays",
    "concept": "filter",
    "code": "// This is an example of array filter method.\r\nconst numbers = [1, 2, 3, 4, 5];\r\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\r\nconsole.log(\"Even numbers:\", evenNumbers);\r\n\r\nlet users = [\r\n    { name: \"sarayu\", age: 25, hobbies: [\"reading\", \"cycling\"] },\r\n    { name: \"sans\", age: 17, hobbies: [\"gaming\", \"coding\"] },\r\n    { name: \"shreya\", age: 30, hobbies: [\"swimming\", \"running\"] },\r\n    { name: \"nidhi\", age: 22, hobbies: [\"cycling\", \"gaming\"] }\r\n];\r\n\r\n// 1. Get names of all adults sorted by age\r\nlet adultNamesSorted = users\r\n    .filter(user => user.age >= 18) // only adults\r\n    .sort((a, b) => a.age - b.age)  // sort ascending by age\r\n    .map(user => user.name);        // get names only\r\nconsole.log(\"Adult names sorted:\", adultNamesSorted);\r\n\r\n// 2. Get a list of all hobbies (no duplicates)\r\nlet uniqueHobbies = [...new Set(users.flatMap(user => user.hobbies))];\r\nconsole.log(\"Unique hobbies:\", uniqueHobbies);\r\n\r\n// 3. Count how many users have each hobby\r\nlet hobbyCount = users\r\n    .flatMap(user => user.hobbies)\r\n    .reduce((count, hobby) => {\r\n        count[hobby] = (count[hobby] || 0) + 1;\r\n        return count;\r\n    }, {});\r\nconsole.log(\"Hobby count:\", hobbyCount);\r\n\r\n// 4. Group users by age category (Teen, Adult)\r\nlet groupedByCategory = users.reduce((group, user) => {\r\n    let category = user.age < 18 ? \"Teen\" : \"Adult\";\r\n    if (!group[category]) group[category] = [];\r\n    group[category].push(user.name);\r\n    return group;\r\n}, {});\r\nconsole.log(\"Grouped by category:\", groupedByCategory);\r\n\r\n// 5. Find the user with the most hobbies\r\nlet userWithMostHobbies = users.reduce((max, user) => \r\n    user.hobbies.length > max.hobbies.length ? user : max\r\n);\r\nconsole.log(\"User with most hobbies:\", userWithMostHobbies.name);\r\n\r\n// 6. Find names of users who like \"cycling\", sorted by name\r\nlet cyclingFans = users\r\n    .filter(user => user.hobbies.includes(\"cycling\"))\r\n    .map(user => user.name)\r\n    .sort();\r\nconsole.log(\"Cycling fans:\", cyclingFans);\r\n\r\n// 7. Create a lookup table (name → age)\r\nlet nameAgeLookup = Object.fromEntries(users.map(user => [user.name, user.age]));\r\nconsole.log(\"Name → Age lookup:\", nameAgeLookup);\r\n\r\n// 8. Deep flatten an irregular nested array\r\nlet deepNested = [1, [2, [3, [4, 5]]], 6];\r\nlet deepFlattened = deepNested.flat(Infinity);\r\nconsole.log(\"Deep flattened:\", deepFlattened);\r\n\r\n// 9. Remove duplicates from an array using reduce\r\nlet nums = [1, 2, 2, 3, 4, 4, 5];\r\nlet noDuplicates = nums.reduce((unique, num) => {\r\n    if (!unique.includes(num)) unique.push(num);\r\n    return unique;\r\n}, []);\r\nconsole.log(\"No duplicates:\", noDuplicates);\r\n\r\n// 10. Find the average age of adults\r\nlet avgAdultAge = users\r\n    .filter(user => user.age >= 18)\r\n    .reduce((sum, user, _, arr) => sum + user.age / arr.length, 0);\r\nconsole.log(\"Average adult age:\", avgAdultAge.toFixed(2));\r\n\r\n\r\nlet creatures = [\r\n    { name: \"Phoenix\", canFly: true },\r\n    { name: \"Dragon\", canFly: true },\r\n    { name: \"Unicorn\", canFly: false },\r\n    { name: \"Mermaid\", canFly: false }\r\n];\r\n\r\nlet flyingCreatures = creatures.filter(c => c.canFly);\r\nconsole.log(\"Creatures that can fly:\", flyingCreatures);\r\n\r\nlet cities = [\"Atlantis\", \"Gotham\", \"Narnia\"];\r\nlet welcomeMessages = cities.map(city => `Welcome to ${city}`);\r\nconsole.log(welcomeMessages);\r\n\r\nlet treasures = [\r\n    { name: \"Silver Ring\", value: 500 },\r\n    { name: \"Golden Crown\", value: 1500 },\r\n    { name: \"Bronze Shield\", value: 300 }\r\n];\r\n\r\nlet expensiveTreasure = treasures.find(t => t.value > 1000);\r\nconsole.log(\"First expensive treasure:\", expensiveTreasure);\r\n\r\nlet spaceships = [\r\n    { name: \"Falcon\", speed: \"0.8c\" },\r\n    { name: \"Star Chaser\", speed: \"1.2c\" },\r\n    { name: \"Nebula Rider\", speed: \"0.9c\" }\r\n];\r\n\r\nlet fasterThanLight = spaceships.some(s => parseFloat(s.speed) > 1);\r\nconsole.log(\"Is any spaceship faster than light?\", fasterThanLight);\r\n\r\nlet robots = [\r\n    { name: \"R2-D2\", charged: true },\r\n    { name: \"Wall-E\", charged: true },\r\n    { name: \"EVE\", charged: true }\r\n];\r\n\r\nlet allCharged = robots.every(r => r.charged);\r\nconsole.log(\"Are all robots charged?\", allCharged);\r\n\r\nlet potions = [\r\n    { name: \"Healing\", power: 50 },\r\n    { name: \"Invisibility\", power: 80 },\r\n    { name: \"Fire Breath\", power: 65 }\r\n];\r\n\r\nlet sortedPotions = potions.sort((a, b) => b.power - a.power);\r\nconsole.log(\"Potions sorted by power:\", sortedPotions);\r\n\r\n\r\nlet cargo = [\r\n    { item: \"Spices\", weight: 10 },\r\n    { item: \"Silk\", weight: 25 },\r\n    { item: \"Gold\", weight: 50 }\r\n];\r\n\r\nlet totalWeight = cargo.reduce((total, c) => total + c.weight, 0);\r\nconsole.log(\"Total cargo weight:\", totalWeight);\r\n\r\n\r\nlet spells = [\"Fireball\", \"Ice Shard\", \"Fireball\", \"Lightning Bolt\", \"Ice Shard\"];\r\nlet uniqueSpells = [...new Set(spells)];\r\nconsole.log(\"Unique spells:\", uniqueSpells);\r\n\r\n\r\nlet islands = [\r\n    [\"Sunset Beach\", \"Coral Bay\"],\r\n    [\"Whale Shore\", \"Pearl Coast\"],\r\n    [\"Lagoon Point\"]\r\n];\r\n\r\nlet allBeaches = islands.flat();\r\nconsole.log(\"All beaches:\", allBeaches);\r\n\r\n\r\nlet army1 = [\"Knights\", \"Archers\"];\r\nlet army2 = [\"Wizards\", \"Healers\"];\r\n\r\nlet unitedArmy = [...army1, ...army2];\r\nconsole.log(\"United army:\", unitedArmy);\r\n\r\n\r\n",
    "output": "Even numbers: [ 2, 4 ]\nAdult names sorted: [ 'nidhi', 'sarayu', 'shreya' ]\nUnique hobbies: [ 'reading', 'cycling', 'gaming', 'coding', 'swimming', 'running' ]\nHobby count: {\n  reading: 1,\n  cycling: 2,\n  gaming: 2,\n  coding: 1,\n  swimming: 1,\n  running: 1\n}\nGrouped by category: { Adult: [ 'sarayu', 'shreya', 'nidhi' ], Teen: [ 'sans' ] }\nUser with most hobbies: sarayu\nCycling fans: [ 'nidhi', 'sarayu' ]\nName → Age lookup: { sarayu: 25, sans: 17, shreya: 30, nidhi: 22 }\nDeep flattened: [ 1, 2, 3, 4, 5, 6 ]\nNo duplicates: [ 1, 2, 3, 4, 5 ]\nAverage adult age: 25.67\nCreatures that can fly: [ { name: 'Phoenix', canFly: true }, { name: 'Dragon', canFly: true } ]\n[ 'Welcome to Atlantis', 'Welcome to Gotham', 'Welcome to Narnia' ]\nFirst expensive treasure: { name: 'Golden Crown', value: 1500 }\nIs any spaceship faster than light? true\nAre all robots charged? true\nPotions sorted by power: [\n  { name: 'Invisibility', power: 80 },\n  { name: 'Fire Breath', power: 65 },\n  { name: 'Healing', power: 50 }\n]\nTotal cargo weight: 85\nUnique spells: [ 'Fireball', 'Ice Shard', 'Lightning Bolt' ]\nAll beaches: [\n  'Sunset Beach',\n  'Coral Bay',\n  'Whale Shore',\n  'Pearl Coast',\n  'Lagoon Point'\n]\nUnited army: [ 'Knights', 'Archers', 'Wizards', 'Healers' ]"
  },
  {
    "category": "objects",
    "concept": "keys",
    "code": "// This is an example of Object.keys method.\r\nconst person = { name: \"John\", age: 30, city: \"New York\" };\r\nconst keys = Object.keys(person);\r\nconsole.log(\"Object keys:\", keys);\r\n",
    "output": "Object keys: [ 'name', 'age', 'city' ]"
  },
  {
    "category": "strings",
    "concept": "reverse",
    "code": "// This is an example of string reverse.\r\nconst str = \"hello\";\r\nconst reversedStr = str.split('').reverse().join('');\r\nconsole.log(\"Reversed string:\", reversedStr);\r\n",
    "output": "Reversed string: olleh"
  }
];
